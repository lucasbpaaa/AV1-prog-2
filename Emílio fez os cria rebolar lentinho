# Python 3

class VectorSpace:
    def __init__(self, dim: int, field):
        self.dim = dim
        self._field = field
        
    def getField(self):
        return self._field
    
    def getVectorSpace(self):
        return f'dim = {self.dim!r}, field = {self._field!r}' #!r é um modificador que indica que a representação do objeto 
                                                              #deve ser obtida usando a função repr()

    def __repr__(self):
        return self.getVectorSpace()
    
    def __mul__(self, f):
        n_vector = []
        for c in self.coord:
            n_vector.append(f * c)  # Multiplica cada coordenada do vetor pelo escalar
        return n_vector  # Retorna um novo vetor com as coordenadas resultantes

    
    def __rmul__(self, f):
        return self.__mul__(f)
    
    def __add__(self, v):
        new_vector = []
        for b1, b2 in zip(self, v):
            new_vector.append(b1 + b2)
        return new_vector
    
    def __sub__(self, v):
        return self.__add__(-1*v)
    
    def __neg__(self):
        return self.__mul__(-1)

class RealVector(VectorSpace):
    _field = float
    def __init__(self, dim, coord):
        super().__init__(dim, self._field)
        self.coord = coord

    @staticmethod
    def _builder(coord):
        return RealVector(coord)
    
    def norm_L2(self):
        return sum([x**2 for x in self.coord])**.5

    def __add__(self, other_vector):
        n_vector = []
        for c1, c2 in zip(self.coord, other_vector.coord): #zip emparelha os elementos correspondentes do vetor self e other_vector
            n_vector.append(c1+c2) #Pega os elementos que foram emparelhados e soma
        return self._builder(n_vector)

    def __mul__(self, alpha):
        n_vector = []
        for c in self.coord:
            n_vector.append(alpha*c)
        return self._builder(n_vector)
    
    def iner_prod(self, other_vector):
        res = 0
        for c1, c2 in zip(self.coord, other_vector.coord):
            res += c1*c2 #Pega os elementos emparelhados e multiplica
        return res

    def __str__(self):
        ls = ['[']
        for c in self.coord[:-1]:
            ls += [f'{c:2.2f}, ']
        ls += f'{self.coord[-1]:2.2f}]'
        s =  ''.join(ls) #O método join() concatena todos os elementos em uma única string
        return s


class Vector2D(RealVector):
    _dim = 2
    def __init__(self, coord):
        if len(coord) != 2:
            raise ValueError
        super().__init__(self._dim, coord)

    @staticmethod
    def _builder(coord):
        return Vector2D(coord)
    
    def CW(self):
        return Vector2D([-self.coord[1], self.coord[0]])
    
    def CCW(self):
        return Vector2D([self.coord[1], -self.coord[0]])
    
class Polinomio_Lista(VectorSpace):
    """
    Representação de polinômio usando lista de python,
    onde o indice [i] da lista representa o grau do monômio X^i 
    """
    _field = float
    def __init__(self, coefs: list):
        super().__init__('INF', self._field)
        self.coefs = coefs
        self._fix_grau()

    def _fix_grau(self):
        while self.coefs[-1] == 0: #Caso tente [1, 2, 3, 0, 0, 0], os zeros à direita são removidos
            self.coefs.pop()

    def _soma_1(self, other_pol):
        r = []
        sv = self if self.grau < other_pol.grau else other_pol
        gv = self if self.grau >= other_pol.grau else other_pol
        for i in range(sv.grau+1):
            r.append(sv[i] + gv[i])
        r += gv[sv.grau+1:]
        return Polinomio_Lista(r)

    def _soma_2(self, other_pol):
        r = [0]*max(self.grau+1,other_pol.grau+1)
        sv = self if self.grau < other_pol.grau else other_pol
        gv = self if self.grau >= other_pol.grau else other_pol
        for i in range(sv.grau+1):
            r[i] = sv[i] + gv[i]
        for i in range(sv.grau+1, gv.grau+1):
            r[i] = gv[i]
        return Polinomio_Lista(r)
    
    def _mult_escalar_1(self, escalar):
        r = []
        for c in self:
            r.append(c*escalar)
        return Polinomio_Lista(r)

    def _mult_escalar_2(self, escalar):
        r = [0]*(self.grau+1)
        for i in range(self.grau+1):
            r[i] = self[i]*escalar
        return Polinomio_Lista(r)

    def __getitem__(self, index):
        return self.coefs[index]

    def __repr__(self):
        return " + ".join([f"{c}x^{i}" if i > 0 else str(c) for i, c in enumerate(self.coefs) if c != 0])
    
    def eval1(self, x):
        r = 0.0
        for c in self[::-1]:
            r = c + r*x
        return r

    def eval2(self, x):
        r = 0.0
        for i, c in enumerate(self):
            r += c*x**i
        return r

    @property
    def grau(self):
        return len(self.coefs) - 1


if __name__ == '__main__':
#############  Vector2D  ###############
    print('**** Vector2D ****')
    V2 = Vector2D([.1, .2]) 
    print('V2 = ', V2) 
# Saída: V2 =  [0.10, 0.20]
    W2 = Vector2D([.3, .6])
    print('-W2 = ', -W2) 
# Saída: -W2 =  [-0.30, -0.60]
    print(V2.getVectorSpace()) 
# Saída: dim = 2, field = <class 'float'>
    r = V2+4*W2-(1.5*V2-W2)
    print('V2+4*W2-(1.5*V2-W2) =', r) 
# Saída: V2 + 4*W2 = [1.30, 2.60]
    print('(V2+4*W2-(1.5*V2-W2)).CW() = ', r.CW()) 
# Saída: (V2 + 4*W2).CW() =  [-2.60, 1.30]
    print('W2.CCW() = ', W2.CCW()) 
# Saída: W2.CCW() =  [0.60, -0.30]
    print('V2.iner_prod(W2) = ', V2.iner_prod(W2)) 
# Saída: V2.iner_prod(W2) =  0.15
    print('3*V2 =', 3*V2, '    W2 = ', W2 )
# Saída: 3*V2 = [0.30, 0.60]     W2 =  [0.30, 0.60]
    print('3*V2 == W2', 3*V2 == W2)
# Saída: False


#############  Polinomio  ###############
    print('\n**** Polinomio ****')
    P1 = Polinomio_Lista([1, 2, 3, 4])
    P2 = Polinomio_Lista([0, 4, 0, 0, 2, 0])
    print(P1, '  --  ', P2 )
# Saída: 1 + 2x^1 + 3x^2 + 4x^3   --   4x^1 + 2x^4
    print(P1.grau, P2.grau)
# Saída: 3 4
    print(P1._soma_1(P2))
# Saída: 1 + 6x^1 + 3x^2 + 4x^3 + 2x^4
    print(P2._mult_escalar_1(.5))
# Saída: 2.0x^1 + 1.0x^4
    print(P2.eval1(2))
# Saída: 40.0





# python 3

class Node:
    def __init__(self, name, priority, left=None, right=None):
        self.name = name
        self.priority = priority
        self.left = left
        self.right = right

    def __str__(self):
        return f'({self.name}, {self.priority})'

class BinaryTree:
    def __init__(self):
        self.root = None

    def _retrive(self, val, is_equal): #Aqui vamos procurar um elemento "val" específico da árvore. 
                                    # "is_equal" é uma função que retorna o nó, caso seja encontrado.
        stack = [self.root]
        while len(stack) > 0: #Vemos que temos um algoritmo de busca em profundidade
            node = stack.pop() #remove e retorna o último nó inserido na pilha, ou seja, ele visita os nós da árvore na ordem em que foram adicionados à pilha.
            if is_equal(node, val): #Se o nó é igual a "val", retornamos ele
                return node
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        return None

    def _insert(self, node: Node, new_node: Node, is_less):#Vamos colocar elementos na árvore. 
        if node is None:
            return new_node
        if is_less(node, new_node): #Se o novo elemento a ser colocado é menor que o nó anteriormente colocado, colocamos esse novo à direita.
            node.left = self._insert(node.left, new_node, is_less)
        else: #Se o novo elemento a ser colocado é maior que o nó anteriormente colocado, colocamos esse novo à esquerda.
            node.right = self._insert(node.right, new_node, is_less)
        return node
    
    def toList(self): #Aqui vamos retornar todos os valores da árvore em uma lista
        stack = [self.root]
        allNodes = []
        while len(stack) > 0:
            node = stack.pop()
            allNodes.append(node)
            if node.left:
                stack.append(node.left)
            if node.right:
                stack.append(node.right)
        return allNodes    

    def pop_greatest(self): #Vai até o mais direita da árvore e retorna ele
        if self.root is None:
            return None
        if self.root.right is None:
            node = self.root
            self.root = node.left
            return node
        return self._pop_g(self.root)
    
    def pop_smallest(self): #Vai até o mais esquerda da árvore e retorna ele
        if self.root is None:
            return None
        if self.root.left is None:
            node = self.root
            self.root = node.right
            return node
        return self._pop_s(self.root)
    
    def _pop_g(self, node):
        if node.right.right is None:
            rnode = node.right
            if node.right.left:
                node.right = node.right.left
            else:
                node.right = None
            return rnode
        return self._pop_g(node.right)

    def _pop_s(self, node):
        if node.left.left is None:
            rnode = node.left
            if node.left.right:
                node.left = node.left.right
            else:
                node.left = None
            return rnode
        return self._pop_s(node.left)

    def _find_greatest(self, node: Node):
        if node.right is None:
            return node
        return self._find_greatest(node.right)

    def _find_smallest(self, node: Node):
        if node.left is None:
            return node
        return self._find_smallest(node.left)


class Tarefas(BinaryTree):
    def inserir(self, name, relevance):
        novo_no = Node(name, relevance)
        self.root = self._insert(self.root, novo_no, self.menor_prioridade)

    def buscar_por_nome(self, name):
        return self._retrive(name, self.nome_igual)

    def encontrar_mais_prioritario(self):
        if self.root is None:
            return None
        return self._find_greatest(self.root)

    def imprimir_ordem_prioridade(self): #Faz uma travessia in-order
        self._imprimir_ordem_prioridade(self.root)

    def _imprimir_ordem_prioridade(self, node):
        if node is not None:
            self._imprimir_ordem_prioridade(node.left)
            print(f"{node}")
            self._imprimir_ordem_prioridade(node.right)

    @staticmethod #Abaixo temos funções que procuram um elemento na árvore por nome ou prioridade
    def nome_igual(node: Node, name: str):
        return node.name == name

    @staticmethod
    def menor_prioridade(no: Node, outro_no: Node):
        return outro_no.priority < no.priority 

    @staticmethod
    def ordenacao_lexica(no: Node, outro_no: Node):
        return outro_no.name < no.name    
    

class FilaDesenbarque(BinaryTree):
    class Carga(Node):
        def __init__(self, name, peso, volume, left=None, right=None):
            priority = 0

            if volume > 0:
                priority = volume**3 + (peso/volume)**2
            self.caracteristicas = {'peso_T' : peso, 
                                   'volume_m3' : volume}
            super().__init__(name, priority, left, right)
        
    _tamanho_fila = 0

    def inserir(self, nome, peso, volume):
        novo_no = self.Carga(nome, peso, volume)
        self.root = self._insert(self.root, novo_no, self.maior_peso)
        self._tamanho_fila += 1

    def executa_carga(self): #Retira a carga com maior prioridade da fila (nó mais à direita).

        self._tamanho_fila -= 1
        return self.pop_greatest()
    
    def totais_carga(self): #Usando um dicionário, vamos percorrendo a árvore e atualizando o peso e volume.
        nodes = self.toList()
        totais = {'Peso_total' : 0,
                  'Volume_total' : 0}
        for n in nodes:
            totais['Peso_total'] += n.caracteristicas['peso_T']
            totais['Volume_total'] += n.caracteristicas['volume_m3']
        return totais

    @staticmethod
    def maior_peso(no: Carga, outro_no: Carga):
        return  no.caracteristicas['peso_T'] > outro_no.caracteristicas['peso_T']

    @property
    def tamanho_fila(self):
        return self._tamanho_fila
    

if __name__ == '__main__':
#############  Afazeres   ################
    print('-/-'*10,' Afazeres ', '-/-'*10)
    afazeres = Tarefas()
    afazeres.inserir("Estudar Algebra", 50)
    afazeres.inserir("Estudar Programação", 82)
    afazeres.inserir("Assistir partida de peteca", 55)
    afazeres.inserir("Lista 1 de programação", 40)
    afazeres.inserir("Lista 2 de programação", 75)
    afazeres.inserir("Lista 3 de programação", 80)
    afazeres.inserir("Estudar Calculo 2", 95)

    print(afazeres.buscar_por_nome("Lista 3 de programação")) 

# Saída: (Lista 3 de programação, 80)
    print(afazeres.encontrar_mais_prioritario())
# Saída: (Estudar Calculo 2, 95)

    afazeres.imprimir_ordem_prioridade()
# Saída:
# (Lista 1 de programaçã0, 40)
# (Estudar Algebra, 50)
# (Assistir partida de peteca, 55)
# (Lista 2 de programação, 75)
# (Lista 3 de programação, 80)
# (Estudar Programação, 82)
# (Estudar Calculo 2, 95)


#############  Cargas   ################
    print()
    print('-/-'*10,' Cargas ', '-/-'*10)
    cargas = FilaDesenbarque()

    cargas.inserir('Margarina', 50.457, 5.15 )
    cargas.inserir('Cereal', 15.025, 166.94 )
    cargas.inserir('Xarope de milho', 100.235, 67.01 )
    cargas.inserir('Cebolinha Seca', 10.363, 345.56 )
    cargas.inserir('Cimento', 73.507 , 49.08 )

    print(cargas.totais_carga())
# Saída: {'Peso_total': 249.58700000000002, 'Volume_total': 633.74}

    while cargas.tamanho_fila > 0:
        print(cargas.executa_carga().name, 
              ' descarregado!  -> Fila restante = ', 
               cargas.tamanho_fila)
# Saída:
# Xarope de milho  descarregado!  -> Fila restante =  4
# Cimento  descarregado!  -> Fila restante =  3
# Margarina  descarregado!  -> Fila restante =  2
# Cereal  descarregado!  -> Fila restante =  1
# Cebolinha Seca  descarregado!  -> Fila restante =  0
